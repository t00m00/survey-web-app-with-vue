name: Codex CLI Integration

on:
  issues:
    types: [labeled]
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  autonomous-coding:
    name: 自律的コーディング
    runs-on: ubuntu-latest
    if: github.event.action == 'labeled' && contains(github.event.label.name, 'codex')

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Node.js環境をセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 依存関係をインストール
        run: npm ci

      - name: ブランチ名を生成
        id: branch
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          BRANCH_NAME="codex/issue-${ISSUE_NUMBER}-$(date +%s)"
          echo "name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: 新しいブランチを作成
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Codex Bot"
          git checkout -b ${{ steps.branch.outputs.name }}

      - name: Issueの内容を取得
        id: issue_content
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "title=${ISSUE_TITLE}" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "${ISSUE_BODY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Codex CLIで自律的コーディングを実行
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ISSUE_TITLE: ${{ steps.issue_content.outputs.title }}
          ISSUE_BODY: ${{ steps.issue_content.outputs.body }}
        run: |
          npm install -g @openai/codex
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"

          cat > codex_ga_autonomous_coding_prompt.md << 'EOF'
          プロジェクト: Vue 3 アンケート/アセスメント Web アプリケーション

          ## Issue内容:
          タイトル: ${ISSUE_TITLE}
          説明: ${ISSUE_BODY}

          ## 指示:
          1. CODEX.mdの内容を確認し、プロジェクトアーキテクチャを理解してください
          2. Issue要求を満たすコードを実装してください
          3. 既存のコード規約に従ってください
          4. 必要に応じてテストも追加してください
          5. 日本語でコミットメッセージを記載してください

          ## 制約:
          - Vue 3 Composition API + Vuetify 3を使用
          - ES6モジュールでコンポーネント構成
          - CDN経由で読み込むためビルド不要
          - localStorage使用でデータ永続化
          EOF

          codex -a auto-edit --quiet "codex_ga_autonomous_coding_prompt.md の内容に従って"

      - name: 変更をコミット
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "変更がありません"
            exit 0
          fi

          git commit -m "🤖 Codex: Issue #${{ github.event.issue.number }} の自動実装

          ${{ steps.issue_content.outputs.title }}

          Auto-generated by Codex CLI"

      - name: ブランチをプッシュ
        run: git push origin ${{ steps.branch.outputs.name }}

      - name: Pull Requestを作成
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "🤖 Codex: ${{ steps.issue_content.outputs.title }}" \
            --body "## 概要
          Issue #${{ github.event.issue.number }} に対するCodex CLIによる自動実装です。

          ## 実装内容
          ${{ steps.issue_content.outputs.body }}

          ## 注意事項
          - この実装は自動生成されたものです
          - レビューをお願いします
          - 必要に応じて調整してください

          Closes #${{ github.event.issue.number }}" \
            --base main \
            --head ${{ steps.branch.outputs.name }}

  code-review:
    name: コードレビュー
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '@codex') &&
      contains(github.event.comment.body, 'レビュー')

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Request情報を取得
        id: pr_info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(echo "${{ github.event.issue.number }}")
          PR_DATA=$(gh pr view ${PR_NUMBER} --json title,body,headRefName,baseRefName)
          echo "number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "data<<EOF" >> $GITHUB_OUTPUT
          echo "${PR_DATA}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Pull Requestのファイル差分を取得
        id: pr_diff
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ steps.pr_info.outputs.number }}
          gh pr diff ${PR_NUMBER} > pr_diff.txt
          echo "diff_file=pr_diff.txt" >> $GITHUB_OUTPUT

      - name: Node.js環境をセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Codex CLIをインストール
        run: |
          npm install -g @openai/codex
          # または適切なCodex CLIのインストール方法

      - name: コードレビューを実行
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          # レビュープロンプトを準備
          cat > review_prompt.md << 'EOF'
          ## コードレビュー要求

          プロジェクト: Vue 3 アンケート/アセスメント Web アプリケーション

          ### レビュー指示:
          ${COMMENT_BODY}

          ### Pull Request情報:
          ${{ steps.pr_info.outputs.data }}

          ### ファイル差分:
          ```diff
          $(cat ${{ steps.pr_diff.outputs.diff_file }})
          ```

          ### レビュー観点:
          1. CODEX.mdの設計方針に従っているか
          2. Vue 3 Composition API + Vuetify 3の適切な使用
          3. ES6モジュール構成の妥当性
          4. コード品質・可読性
          5. セキュリティ上の問題
          6. パフォーマンスへの影響

          ### 出力形式:
          - 日本語で記載
          - 具体的で建設的なフィードバック
          - 改善提案がある場合はコード例も含める
          - 問題ないポイントも評価する
          EOF

          # Codex CLIでレビューを実行
          REVIEW_RESULT=$(codex -- --approval-mode full-auto --quiet "$(cat review_prompt.md)")
          echo "${REVIEW_RESULT}" > review_result.md

      - name: レビューコメントを投稿
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ steps.pr_info.outputs.number }}

          cat > final_comment.md << 'EOF'
          ## 🤖 Codex レビュー結果

          $(cat review_result.md)

          ---
          *このレビューはCodex CLIによって自動生成されました*
          EOF

          gh pr comment ${PR_NUMBER} --body-file final_comment.md

  review-response:
    name: レビュー応答処理
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request_review' &&
      contains(github.event.review.body, '@codex')

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: レビューコメントに応答
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REVIEW_BODY="${{ github.event.review.body }}"
          PR_NUMBER=${{ github.event.pull_request.number }}

          cat > response.md << 'EOF'
          ## 🤖 Codex レビュー応答

          レビューありがとうございます！

          **レビュー内容:**
          ${REVIEW_BODY}

          **対応方針:**
          ご指摘いただいた点について確認し、必要に応じて修正いたします。
          追加の@codexレビュー要求がありましたら、コメントでお知らせください。

          ---
          *この応答はCodex CLIによって自動生成されました*
          EOF

          gh pr comment ${PR_NUMBER} --body-file response.md
