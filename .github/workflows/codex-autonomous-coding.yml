name: Codex CLI autonomous-coding

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  autonomous-coding:
    name: 自律型コーディング
    runs-on: ubuntu-latest
    if: github.event.action == 'labeled' && contains(github.event.label.name, 'codex')

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Node.js環境をセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"

      - name: 依存関係をインストール
        run: npm ci

      - name: ブランチ名を生成
        id: branch
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          BRANCH_NAME="codex/issue-${ISSUE_NUMBER}-$(date +%s)"
          echo "name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: 新しいブランチを作成
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Codex Bot"
          git checkout -b ${{ steps.branch.outputs.name }}

      - name: Issueの内容を取得
        id: issue_content
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "title=${ISSUE_TITLE}" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "${ISSUE_BODY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Codex CLIで自律的コーディングを実行
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ISSUE_TITLE: ${{ steps.issue_content.outputs.title }}
          ISSUE_BODY: ${{ steps.issue_content.outputs.body }}
        run: |
          npm install -g @openai/codex
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"

          cat > codex_ga_autonomous_coding_prompt.md <<EOF
          プロジェクト: Vue 3 アンケート/アセスメント Web アプリケーション

          ## Issue内容:
          タイトル: ${ISSUE_TITLE}
          説明: ${ISSUE_BODY}

          ## 指示:
          1. CODEX.mdの内容を確認し、プロジェクトアーキテクチャを理解してください
          2. Issue要求を満たすコードを実装してください
          3. 既存のコード規約に従ってください
          4. 必要に応じてテストも追加してください
          5. 日本語でコミットメッセージを記載してください

          ## 制約:
          - Vue 3 Composition API + Vuetify 3を使用
          - ES6モジュールでコンポーネント構成
          - CDN経由で読み込むためビルド不要
          - localStorage使用でデータ永続化
          - ファイルを作成、変更した際に確実に保存できていることを確認する
          EOF

          ls
          pwd

          codex -a auto-edit --quiet "$(cat codex_ga_autonomous_coding_prompt.md)"

      - name: 変更をコミット
        run: |
          git add .
          git status --short
          if git diff --staged --quiet; then
            echo "変更がありません"
            exit 0
          fi

          git commit -m "🤖 Codex: Issue #${{ github.event.issue.number }} の自動実装

          ${{ steps.issue_content.outputs.title }}

          Auto-generated by Codex CLI"

      - name: ブランチをプッシュ
        run: git push origin ${{ steps.branch.outputs.name }}

      - name: Pull Requestを作成
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "🤖 Codex: ${{ steps.issue_content.outputs.title }}" \
            --body "## 概要
          Issue #${{ github.event.issue.number }} に対するCodex CLIによる自動実装です。

          ## 実装内容
          ${{ steps.issue_content.outputs.body }}

          ## 注意事項
          - この実装は自動生成されたものです
          - レビューをお願いします
          - 必要に応じて調整してください

          Closes #${{ github.event.issue.number }}" \
            --base main \
            --head ${{ steps.branch.outputs.name }}

      - name: 変更概要をまとめるイベント発火
        env:
          GH_TOKEN: ${{ secrets.OWNER_PAT  }}
        run: |
          gh pr comment ${{ steps.create_pr.outputs.pr_number }} \
            --body "/gemini summary"

      - name: レビュー開始イベント発火
        env:
          GH_TOKEN: ${{ secrets.OWNER_PAT }}
        run: |
          gh pr comment ${{ steps.create_pr.outputs.pr_number }} \
            --body "/gemini review"
